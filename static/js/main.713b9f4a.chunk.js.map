{"version":3,"sources":["components/Header/index.js","pages/feedback/index.js","redux/actions/score.js","redux/actions/index.js","components/Loading/index.js","services/api.js","redux/actions/quiz.js","components/CardGame/ButtonsAnswers.js","components/CardGame/Question.js","components/CardGame/index.js","components/Quiz/index.js","pages/game/index.js","components/LoginForm/index.js","redux/actions/user.js","pages/login/index.js","pages/ranking/index.js","components/SettingsForm/index.js","pages/settings/index.js","serviceWorker.js","redux/reducers/user.js","redux/reducers/quiz.js","redux/reducers/score.js","redux/reducers/index.js","redux/store/index.js","index.js","App.js","trivia.png"],"names":["Header","this","props","playerName","gravatarPatch","score","className","data-testid","src","alt","React","Component","connect","state","user","name","emailGravatar","scoreboard","Feedback","shouldRedirect","to","saved","savePlayerInTheRanking","bind","setState","email","actualRanking","localStorage","getItem","actualRanking2","JSON","parse","ranking","picture","setItem","stringify","newRanking","assertions","clearScoreState","type","onClick","push","dispatch","Loading","getToken","a","async","fetch","then","data","json","response","token","encodeUtf8","str","unescape","encodeURIComponent","replace","newArray","element","incorrect_answers","map","answer","correct_answer","newResults","results","category","question","difficulty","allAnswer","array","sort","Math","random","value","b","correctAnswer","incorrectAnswers","getQuiz","newArrayObject","console","log","getGravatar","hash","url","fetchQuiz","getQuizApi","payload","quiz","ButtonsAnswers","dataTestId","buttonsAnswersDisabledValidity","handleClickAnswers","disabled","Question","timer","correct","incorrect","index","key","DIFFICULTY","hard","medium","easy","CardGame","disabledButtonsAnswers","showButtonNext","changeColorsAnswersButtons","changeShowNextButton","EnableAnswersButtons","clearColorsAnswersButtons","clearColorAndEnableButtonQuestion","intervalId","setInterval","prevState","clearInterval","saveScoreStore","saveAssertionsStore","target","sumScore","sumAssertions","changeDisabledAnswersButtons","changeCount","player","gravatarEmail","savePlayerLocalStorage","createButtonNextQuestion","actionScore","actionAssertions","Quiz","loading","count","handleChange","callback","Login","handleSubmit","event","preventDefault","saveNameEmail","saveToken","md5","toString","length","test","onSubmit","autoComplete","id","onChange","placeholder","checkValidity","actionUser","actionToken","login","logo","LoginForm","Ranking","jsonRanking","getRanking","SettingsForm","categories","difficulties","types","htmlFor","cat","diff","typ","Settings","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","exact","path","component","game","feedback","settings","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.713b9f4a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport './styles.css';\n\nclass Header extends React.Component {\n  render() {\n    const { playerName, gravatarPatch, score } = this.props;\n    return (\n      <header>\n        <img\n          className=\"gravatar\"\n          data-testid=\"header-profile-picture\"\n          src={ gravatarPatch }\n          alt=\"Imagem de perfil do Gravatar\"\n        />\n        <div data-testid=\"header-player-name\">\n          {playerName}\n        </div>\n        <div data-testid=\"header-score\">\n          {score}\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  playerName: PropTypes.string.isRequired,\n  gravatarPatch: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  playerName: state.user.name,\n  gravatarPatch: state.user.emailGravatar,\n  score: state.scoreboard.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../../components/Header';\nimport { actionRestScore } from '../../redux/actions/score';\n\nimport './styles.css';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.state = {\n      shouldRedirect: false,\n      to: '',\n      saved: false,\n    };\n    this.savePlayerInTheRanking = this.savePlayerInTheRanking.bind(this);\n  }\n\n  savePlayerInTheRanking() {\n    const { saved } = this.state;\n    if (!saved) {\n      this.setState({\n        saved: true,\n      });\n      const { name, score, email } = this.props;\n      const actualRanking = localStorage.getItem('ranking');\n      const actualRanking2 = JSON.parse(actualRanking);\n      const ranking = [\n        {\n          name,\n          score,\n          picture: email,\n        },\n      ];\n      if (actualRanking === null) {\n        localStorage.setItem('ranking', JSON.stringify(ranking));\n      }\n      if (actualRanking !== null) {\n        const newRanking = [\n          ...actualRanking2,\n          { name, score, picture: email },\n        ];\n        localStorage.setItem('ranking', JSON.stringify(newRanking));\n      }\n    }\n  }\n\n  render() {\n    const { score, assertions, clearScoreState } = this.props;\n    const { shouldRedirect, to } = this.state;\n    const THREE_ASSERTIONS = 3;\n    this.savePlayerInTheRanking();\n    return (\n      <section>\n        <Header />\n        <h1 data-testid=\"feedback-text\">\n          { assertions >= THREE_ASSERTIONS\n            ? 'Mandou bem! ' : 'Podia ser melhor...' }\n        </h1>\n        <p>\n          {'Um total de '}\n          <span data-testid=\"feedback-total-score\">\n            {score}\n          </span>\n          {' pontos'}\n        </p>\n        <p>\n          {'Você acertou '}\n          <span data-testid=\"feedback-total-question\">\n            {assertions}\n          </span>\n          {' questões!'}\n        </p>\n        <button\n          data-testid=\"btn-ranking\"\n          type=\"button\"\n          onClick={ () => {\n            clearScoreState();\n            this.setState({\n              shouldRedirect: true,\n              to: '/ranking',\n            });\n          } }\n        >\n          Ver Ranking\n        </button>\n        <button\n          data-testid=\"btn-play-again\"\n          type=\"button\"\n          onClick={ () => {\n            clearScoreState();\n            this.setState({\n              shouldRedirect: true,\n              to: '/',\n            });\n          } }\n        >\n          Jogar novamente\n        </button>\n\n        { shouldRedirect && <Redirect push to={ to } />}\n\n      </section>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  clearScoreState: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  score: state.scoreboard.score,\n  assertions: state.scoreboard.assertions,\n  name: state.user.name,\n  email: state.user.email,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearScoreState: () => dispatch(actionRestScore()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import { ADD_SCORE, ADD_ASSERTIONS, RESET_SCORE } from './index';\n\nexport const actionScore = (score) => ({\n  type: ADD_SCORE, payload: { score },\n});\n\nexport const actionAssertions = (assertions) => ({\n  type: ADD_ASSERTIONS,\n  payload: { assertions },\n});\n\nexport const actionRestScore = () => ({\n  type: RESET_SCORE,\n});\n","export const USER = 'USER';\nexport const TOKEN = 'TOKEN';\nexport const ADD_SCORE = 'ADD_SCOREBOARD';\nexport const ADD_ASSERTIONS = 'ADD_ASSERTIONS';\nexport const GET_QUIZ = 'GET_QUIZ';\nexport const REQUEST_QUIZ = 'REQUEST_QUIZ';\nexport const RESET_SCORE = 'RESET_SCORE';\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>\n        Carregando...\n      </div>);\n  }\n}\n\nexport default Loading;\n","// const fetch = require('node-fetch');\n\nexport const getToken = async () => {\n  const response = await fetch('https://opentdb.com/api_token.php?command=request').then((data) => data.json());\n  return response.token;\n};\n// https://trybecourse.slack.com/archives/C01A9A2N93R/p1614959745465500?thread_ts=1614957955.461300&cid=C01A9A2N93R\nconst encodeUtf8 = (str) => {\n  const stringUTF = unescape(encodeURIComponent(str));\n  return stringUTF.replace(/&quot;|&#039;/gi, '\\'');\n};\n\nconst newArray = (element) => [...element.incorrect_answers\n  .map((answer) => [encodeUtf8(answer), 'wrong-answer-']),\n[encodeUtf8(element.correct_answer), 'correct-answer']];\n\nconst shuffleArray = (array) => array.map((a) => ({ sort: Math.random(), value: a }))\n  .sort((a, b) => a.sort - b.sort)\n  .map((a) => a.value);\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n\nconst newResults = (results) => results.map((element) => ({\n  category: encodeUtf8(element.category),\n  question: encodeUtf8(element.question),\n  type: element.type,\n  difficulty: element.difficulty,\n  allAnswer: shuffleArray(newArray(element)),\n  correctAnswer: element.correct_answer,\n  incorrectAnswers: [...element.incorrect_answers],\n}));\n\nexport const getQuiz = async () => {\n  const token = await getToken();\n  const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`).then((data) => data.json());\n  const { results } = response;\n  const newArrayObject = newResults(results);\n  console.log(newArrayObject);\n  return newArrayObject;\n};\n\nexport async function getGravatar(hash) {\n  const response = await fetch(`https://www.gravatar.com/avatar/${hash}`);\n  return response.url;\n}\n","import { getQuiz as getQuizApi } from '../../services/api';\nimport { GET_QUIZ, REQUEST_QUIZ } from './index';\n\nconst getQuiz = (quiz) => ({ type: GET_QUIZ, payload: { quiz } });\n\nconst requestQuiz = () => ({ type: REQUEST_QUIZ });\n\nconst fetchQuiz = (token) => async (dispatch) => {\n  dispatch(requestQuiz());\n  const results = await getQuizApi(token);\n  return dispatch(getQuiz(results));\n};\n\nexport default fetchQuiz;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ButtonsAnswers extends Component {\n  render() {\n    const { name,\n      dataTestId,\n      className,\n      buttonsAnswersDisabledValidity,\n      handleClickAnswers,\n      answer,\n    } = this.props;\n\n    return (\n      <button\n        name={ name }\n        type=\"button\"\n        data-testid={ dataTestId }\n        className={ className }\n        disabled={ buttonsAnswersDisabledValidity }\n        onClick={ handleClickAnswers }\n      >\n        {answer}\n      </button>\n    );\n  }\n}\n\nButtonsAnswers.propTypes = {\n  name: PropTypes.string.isRequired,\n  dataTestId: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  handleClickAnswers: PropTypes.func.isRequired,\n  buttonsAnswersDisabledValidity: PropTypes.bool.isRequired,\n  answer: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonsAnswers from './ButtonsAnswers';\n\nclass Question extends React.Component {\n  render() {\n    const { timer,\n      category,\n      question,\n      allAnswer,\n      correct,\n      incorrect,\n      handleClickAnswers,\n      buttonsAnswersDisabledValidity } = this.props;\n    return (\n      <section>\n        <br />\n        <br />\n        <div className=\"timer\">\n          {timer}\n        </div>\n        <h1 data-testid=\"question-category\">\n          {category}\n        </h1>\n\n        <div data-testid=\"question-text\">\n          {question}\n        </div>\n        <br />\n        <div className=\"answers-btn\">\n          {allAnswer.map((answer, index) => (\n            <ButtonsAnswers\n              key={ index }\n              name={ answer[1] }\n              dataTestId={ answer[1] }\n              className={ answer[1] === 'correct-answer' ? correct : incorrect }\n              buttonsAnswersDisabledValidity={ buttonsAnswersDisabledValidity }\n              handleClickAnswers={ handleClickAnswers }\n              answer={ answer[0] }\n            />\n          ))}\n        </div>\n\n      </section>\n\n    );\n  }\n}\n\nQuestion.propTypes = {\n  timer: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  question: PropTypes.string.isRequired,\n  allAnswer: PropTypes.arrayOf.isRequired,\n  correct: PropTypes.string.isRequired,\n  incorrect: PropTypes.string.isRequired,\n  handleClickAnswers: PropTypes.func.isRequired,\n  buttonsAnswersDisabledValidity: PropTypes.bool.isRequired,\n};\n\nexport default Question;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\nimport { connect } from 'react-redux';\nimport { actionScore, actionAssertions } from '../../redux/actions/score';\nimport Question from './Question';\n\nconst ONE_SECOND = 1000;\nconst DIFFICULTY = { hard: 3, medium: 2, easy: 1 };\nconst TEN = 10;\n\nclass CardGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      'correct-answer': '',\n      'wrong-answer-': '',\n      timer: 30,\n      disabledButtonsAnswers: false,\n      showButtonNext: false,\n    };\n    this.handleClickAnswers = this.handleClickAnswers.bind(this);\n    this.changeColorsAnswersButtons = this.changeColorsAnswersButtons.bind(this);\n    this.changeShowNextButton = this.changeShowNextButton.bind(this);\n    this.EnableAnswersButtons = this.EnableAnswersButtons.bind(this);\n    this.clearColorsAnswersButtons = this.clearColorsAnswersButtons.bind(this);\n    this.clearColorAndEnableButtonQuestion = this.clearColorAndEnableButtonQuestion\n      .bind(this);\n  }\n\n  componentDidMount() {\n    this.intervalId = setInterval(() => {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }));\n    }, ONE_SECOND);\n  }\n\n  componentDidUpdate() {\n    const { timer, disabledButtonsAnswers } = this.state;\n    if (timer === 0 || disabledButtonsAnswers) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  sumScore() {\n    const { element: { difficulty }, score, saveScoreStore } = this.props;\n    const { timer } = this.state;\n    const points = TEN + (timer * DIFFICULTY[difficulty]);\n    const newScore = score + points;\n    saveScoreStore(newScore);\n  }\n\n  sumAssertions() {\n    const { saveAssertionsStore, assertions } = this.props;\n    const newAssertions = assertions + 1;\n    saveAssertionsStore(newAssertions);\n  }\n\n  changeColorsAnswersButtons() {\n    this.setState({\n      'wrong-answer-': 'red',\n      'correct-answer': 'green',\n\n    });\n  }\n\n  changeShowNextButton() {\n    this.setState({\n      showButtonNext: true,\n    });\n  }\n\n  changeDisabledAnswersButtons() {\n    this.setState({\n      disabledButtonsAnswers: true,\n      showButtonNext: true,\n    });\n  }\n\n  handleClickAnswers({ target: { name } }) {\n    if (name === 'correct-answer') {\n      this.sumScore();\n      this.sumAssertions();\n    }\n    this.changeColorsAnswersButtons();\n    this.changeShowNextButton();\n    this.changeDisabledAnswersButtons();\n  }\n\n  showNextQuestionButton() {\n    this.setState({\n      disabledButtonsAnswers: true,\n    });\n  }\n\n  clearColorsAnswersButtons() {\n    this.setState({\n      'correct-answer': '',\n      'wrong-answer-': '',\n    });\n  }\n\n  EnableAnswersButtons() {\n    this.setState({\n      disabledButtonsAnswers: false,\n    });\n  }\n\n  clearColorAndEnableButtonQuestion() {\n    this.EnableAnswersButtons();\n    this.clearColorsAnswersButtons();\n  }\n\n  buttonsAnswersDisabledValidity() {\n    const { timer, disabledButtonsAnswers } = this.state;\n    if (timer === 0 || disabledButtonsAnswers) {\n      return true;\n    }\n  }\n\n  createButtonNextQuestion() {\n    const { showButtonNext, timer } = this.state;\n    const { changeCount } = this.props;\n    if (showButtonNext || timer === 0) {\n      return (\n        <button\n          type=\"button\"\n          data-testid=\"btn-next\"\n          className=\"btn-next\"\n          onClick={ () => changeCount(this.clearColorAndEnableButtonQuestion) }\n        >\n          Next Question\n        </button>\n      );\n    }\n  }\n\n  savePlayerLocalStorage() {\n    const { name, email, score, assertions } = this.props;\n    const state = {\n      player: {\n        name,\n        assertions,\n        score,\n        gravatarEmail: email,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  render() {\n    this.savePlayerLocalStorage();\n    const element = this.props;\n    const { timer, 'correct-answer': correct,\n      'wrong-answer-': incorrect } = this.state;\n    const { category, allAnswer, question } = element.element;\n    // console.log(allAnswer);\n    return (\n      <section>\n        <Question\n          category={ category }\n          allAnswer={ allAnswer }\n          question={ question }\n          timer={ timer }\n          correct={ correct }\n          incorrect={ incorrect }\n          handleClickAnswers={ this.handleClickAnswers }\n          buttonsAnswersDisabledValidity={ this.buttonsAnswersDisabledValidity() }\n        />\n        <div className=\"next-btn\">\n          {this.createButtonNextQuestion()}\n        </div>\n      </section>\n    );\n  }\n}\n\nCardGame.propTypes = {\n  element: PropTypes.shape({\n    category: PropTypes.string,\n    difficulty: PropTypes.string,\n    question: PropTypes.string,\n    allAnswer: PropTypes.arrayOf(Array),\n  }).isRequired,\n  saveScoreStore: PropTypes.func.isRequired,\n  changeCount: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  saveAssertionsStore: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.user.name,\n  email: state.user.email,\n  score: state.scoreboard.score,\n  assertions: state.scoreboard.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveScoreStore: (score) => dispatch(actionScore(score)),\n  saveAssertionsStore: (assertions) => dispatch(actionAssertions(assertions)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardGame);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport Loading from '../Loading';\nimport fetchQuiz from '../../redux/actions/quiz';\nimport CardGame from '../CardGame';\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      count: 0,\n    };\n    this.changeCount = this.changeCount.bind(this);\n  }\n\n  async componentDidMount() {\n    const { getQuiz, token } = this.props;\n    await getQuiz(token);\n    this.handleChange();\n  }\n\n  changeCount(callback) {\n    this.setState((prevState) => ({\n      count: prevState.count + 1,\n    }));\n    callback();\n  }\n\n  handleChange() {\n    this.setState({\n      loading: false,\n    });\n  }\n\n  render() {\n    const { loading, count } = this.state;\n    const { quiz, score, name, email } = this.props;\n    if (loading) return <Loading />;\n    const MAX = 4;\n    if (count > MAX) return <Redirect to=\"/feedback\" />;\n\n    return (\n      <div>\n        <CardGame\n          element={ quiz[count] }\n          score={ score }\n          changeCount={ this.changeCount }\n          name={ name }\n          email={ email }\n          key={ count }\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  quiz: state.quiz.quiz,\n  token: state.user.token,\n  name: state.user.name,\n  email: state.user.email,\n  score: state.scoreboard.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuiz: (token) => dispatch(fetchQuiz(token)),\n});\n\nQuiz.propTypes = {\n  getQuiz: PropTypes.func.isRequired,\n  quiz: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\n","import React, { Component } from 'react';\nimport Header from '../../components/Header';\nimport Quiz from '../../components/Quiz';\nimport './styles.css';\n\nexport default class index extends Component {\n  render() {\n    return (\n      <div className=\"card-game\">\n        <Header />\n        <Quiz />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { getToken, getGravatar } from '../../services/api';\nimport { actionUser, actionToken } from '../../redux/actions/user';\n\nimport './styles.css';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      shouldRedirect: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const { name, email } = this.state;\n    const { saveNameEmail, saveToken } = this.props;\n    const hash = md5(email).toString();\n    const emailGravatar = await getGravatar(hash);\n    this.setState({ email: emailGravatar });\n    saveNameEmail(name, emailGravatar);\n    const token = await getToken();\n    saveToken(token);\n    localStorage.setItem('token', token);\n    this.setState({ shouldRedirect: true });\n  }\n\n  checkValidity() {\n    const { name, email } = this.state;\n    const nameLength = 1;\n    if (name.length < nameLength) return false;\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) return false;\n    // https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n    return true;\n  }\n\n  savePlayerLocalStorage() {\n    const { name, score, assertions, emailGravatar } = this.props;\n    // const {  } = this.state;\n    const state = {\n      player: {\n        name,\n        assertions,\n        score,\n        gravatarEmail: emailGravatar,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  render() {\n    this.savePlayerLocalStorage();\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/game\" />;\n    return (\n      <div className=\"loginForm\">\n        <form\n          onSubmit={ this.handleSubmit }\n          autoComplete=\"on\"\n        >\n          <input\n            data-testid=\"input-player-name\"\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            onChange={ this.handleChange }\n            placeholder=\"Player Name\"\n          />\n          <input\n            data-testid=\"input-gravatar-email\"\n            id=\"email\"\n            type=\"text\"\n            name=\"email\"\n            onChange={ this.handleChange }\n            placeholder=\"Player Email\n            \"\n          />\n          <button\n            data-testid=\"btn-play\"\n            disabled={ !this.checkValidity() }\n            type=\"submit\"\n          >\n            PLAY!\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  saveNameEmail: PropTypes.func.isRequired,\n  saveToken: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  emailGravatar: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.user.name,\n  emailGravatar: state.user.emailGravatar,\n  score: state.scoreboard.score,\n  assertions: state.scoreboard.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveNameEmail: (name, emailGravatar) => dispatch(actionUser(name, emailGravatar)),\n  saveToken: (token) => dispatch(actionToken(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import { USER, TOKEN } from './index';\n\nexport const actionUser = (name, emailGravatar) => ({\n  type: USER, payload: { name, emailGravatar },\n});\nexport const actionToken = (token) => ({ type: TOKEN, payload: { token } });\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport LoginForm from '../../components/LoginForm';\nimport './styles.css';\nimport logo from '../../trivia.png';\n\nexport default class login extends Component {\n  render() {\n    return (\n      <div className=\"login\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"group-name\">TWENTY-FIVE</h1>\n        <LoginForm />\n        <Link to=\"/settings\" className=\"login-btn\" data-testid=\"btn-settings\">\n          Settings\n        </Link>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nclass Ranking extends React.Component {\n  getRanking() {\n    const jsonRanking = localStorage.getItem('ranking');\n    const ranking = JSON.parse(jsonRanking);\n    return ranking;\n  }\n\n  render() {\n    if (!this.getRanking()) {\n      return null;\n    } const ranking = this.getRanking().sort((a, b) => b.score - a.score);\n\n    // const reducedRanking = ranking.reduce((acc, cur) => {\n    //   if (!acc.some((item) => item.picture === cur.picture)) acc.push(cur);\n    //   return acc;\n    // }, []);\n\n    return (\n      <section>\n        <h3 data-testid=\"ranking-title\">Ranking</h3>\n        {ranking.map((player, index) => (\n          <p key={ index }>\n            <span data-testid={ `player-name-${index}` }>{player.name}</span>\n            <span data-testid={ `player-score-${index}` }>\n              {`, ${player.score}`}\n            </span>\n          </p>\n        ))}\n        <br />\n        <Link to=\"/\" data-testid=\"btn-go-home\" className=\"btn\">\n          Volta para a tela inicial\n        </Link>\n      </section>\n    );\n  }\n}\n\nexport default Ranking;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../../trivia.png';\nimport './styles.css';\n\nexport default class SettingsForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: 'category1',\n      difficulty: 'difficulty1',\n      type: 'type1',\n    };\n\n    this.categories = ['category1', 'category2', 'category3'];\n    this.difficulties = ['difficulty1', 'difficulty2', 'difficulty3'];\n    this.types = ['type1', 'type2', 'type3'];\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { category, difficulty, type } = this.state;\n    return (\n      <form>\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"group-name\">TWENTY-FIVE</h1>\n        <h2 data-testid=\"settings-title\">Configurações</h2>\n        <div className=\"selects\">\n          <label htmlFor=\"category-select\">\n            Categoria\n            <select\n              name=\"category\"\n              value={ category }\n              onChange={ this.handleChange }\n            >\n              {this.categories.map((cat, index) => (\n                <option key={ index } value={ cat }>{cat}</option>\n              ))}\n            </select>\n          </label>\n\n          <label htmlFor=\"difficulty-select\">\n            Dificuldade\n            <select\n              name=\"difficulty\"\n              value={ difficulty }\n              onChange={ this.handleChange }\n            >\n              {this.difficulties.map((diff, index) => (\n                <option key={ index } value={ diff }>{diff}</option>\n              ))}\n            </select>\n          </label>\n\n          <label htmlFor=\"type-select\">\n            Tipo\n            <select\n              name=\"type\"\n              value={ type }\n              onChange={ this.handleChange }\n            >\n              {this.types.map((typ, index) => (\n                <option key={ index } value={ typ }>{typ}</option>\n              ))}\n            </select>\n          </label>\n        </div>\n        <Link to=\"/\" className=\"home-btn\" data-testid=\"btn-go-home\">Voltar</Link>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport SettingsForm from '../../components/SettingsForm';\n\nexport default class Settings extends React.Component {\n  render() {\n    return (\n      <SettingsForm />\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = { name: '', emailGravatar: '', token: '' };\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'USER':\n    return {\n      ...state,\n      name: action.payload.name,\n      emailGravatar: action.payload.emailGravatar,\n    };\n  case 'TOKEN':\n    return { ...state, token: action.payload.token };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","const INITIAL_STATE = { quiz: [] };\nconst quiz = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  // case 'QUIZ':\n  //   return { ...state, quiz: action.payload.quiz };\n  // case 'REQUEST_QUIZ':\n  //   return { ...state, loading: true };\n  case 'GET_QUIZ':\n    return { ...state, quiz: action.payload.quiz };\n  default:\n    return state;\n  }\n};\n\nexport default quiz;\n","import { ADD_SCORE, ADD_ASSERTIONS, RESET_SCORE } from '../actions';\n\nconst INITIAL_STATE = { score: 0, assertions: 0 };\n\nconst score = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_SCORE:\n    return { ...state, score: action.payload.score };\n  case ADD_ASSERTIONS:\n    return { ...state, assertions: action.payload.assertions };\n  case RESET_SCORE:\n    return { ...state, score: 0 };\n  default:\n    return state;\n  }\n};\n\nexport default score;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport quiz from './quiz';\nimport scoreboard from './score';\n\nconst rootReducers = combineReducers({ user, quiz, scoreboard });\n\nexport default rootReducers;\n","// instalar npm install --save redux-devtools-extension\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducers from '../reducers';\n\nconst store = createStore(rootReducers, composeWithDevTools(\n  applyMiddleware(thunk),\n  // other store enhancers if any\n));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Router>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n// import logo from './trivia.png';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport { feedback, game, login, ranking, settings } from './pages';\n\nexport default function App() {\n  return (\n\n    <Switch>\n      <Route exact path=\"/\" component={ login } />\n      <Route path=\"/game\" component={ game } />\n      <Route path=\"/ranking\" component={ ranking } />\n      <Route path=\"/feedback\" component={ feedback } />\n      <Route path=\"/settings\" component={ settings } />\n\n      {/* <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            SUA VEZ\n          </p>\n\n        </header>\n      </div> */}\n    </Switch>\n\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";"],"sourceRoot":""}